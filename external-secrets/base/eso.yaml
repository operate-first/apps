kind: OperatorConfig
apiVersion: operator.external-secrets.io/v1alpha1
metadata:
  name: opf
  namespace: external-secrets-operator
spec:
  affinity: {}
  certController:
    affinity: {}
    create: true
    deploymentAnnotations: {}
    extraArgs: {}
    extraEnv: []
    fullnameOverride: ''
    image:
      pullPolicy: IfNotPresent
      repository: ghcr.io/external-secrets/external-secrets
      tag: ''
    imagePullSecrets: []
    nameOverride: ''
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    podSecurityContext: {}
    priorityClassName: ''
    prometheus:
      enabled: false
      service:
        port: 8080
    rbac:
      create: true
    requeueInterval: 5m
    resources: {}
    securityContext: {}
    serviceAccount:
      annotations: {}
      create: true
      name: ''
    tolerations: []
  concurrent: 1
  controllerClass: ''
  crds:
    createClusterExternalSecret: true
    createClusterSecretStore: true
  createOperator: true
  deploymentAnnotations: {}
  extraArgs: {}
  extraEnv: []
  fullnameOverride: ''
  image:
    pullPolicy: IfNotPresent
    repository: ghcr.io/external-secrets/external-secrets
    tag: ''
  imagePullSecrets: []
  installCRDs: false
  leaderElect: false
  nameOverride: ''
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}
  priorityClassName: ''
  processClusterExternalSecret: true
  processClusterStore: true
  prometheus:
    enabled: false
    service:
      port: 8080
  rbac:
    create: true
  replicaCount: 1
  resources: {}
  scopedNamespace: ''
  scopedRBAC: false
  securityContext: {}
  serviceAccount:
    annotations: {}
    create: true
    name: ''
  tolerations: []
  webhook:
    affinity: {}
    certCheckInterval: 5m
    certDir: /tmp/certs
    create: true
    deploymentAnnotations: {}
    extraArgs: {}
    extraEnv: []
    fullnameOverride: ''
    image:
      pullPolicy: IfNotPresent
      repository: ghcr.io/external-secrets/external-secrets
      tag: ''
    imagePullSecrets: []
    nameOverride: ''
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    podSecurityContext: {}
    priorityClassName: ''
    prometheus:
      enabled: false
      service:
        port: 8080
    rbac:
      create: true
    replicaCount: 1
    resources: {}
    securityContext: {}
    serviceAccount:
      annotations: {}
      create: true
      name: ''
    tolerations: []
