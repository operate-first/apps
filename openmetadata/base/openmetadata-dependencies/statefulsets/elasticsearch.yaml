apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  labels:
    app: "elasticsearch"
  annotations:
    esMajorVersion: "7"
spec:
  serviceName: elasticsearch-headless
  selector:
    matchLabels:
      app: "elasticsearch"
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 30Gi
  template:
    metadata:
      name: "elasticsearch"
      labels:
        app: "elasticsearch"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - "elasticsearch"
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      enableServiceLinks: true
      # initContainers:
      #  - name: configure-sysctl
      #    securityContext:
      #      runAsUser: 0
      #      privileged: true
      #    image: "docker.elastic.co/elasticsearch/elasticsearch:7.10.2"
      #    imagePullPolicy: "Always"
      #    command: ["sysctl", "-w", "vm.max_map_count=262144"]
      #    resources: {}
      containers:
        - name: "elasticsearch"
          image: "docker.elastic.co/elasticsearch/elasticsearch:7.10.2"
          imagePullPolicy: "Always"
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  #!/usr/bin/env bash -e
                  # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=yellow&timeout=20s" )
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file

                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Elasticsearch Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no

                  http () {
                    local path="${1}"
                    local args="${2}"
                    set -- -XGET -s

                    if [ "$args" != "" ]; then
                      set -- "$@" $args
                    fi

                    if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                      set -- "$@" -u "${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                    fi

                    curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                  }

                  if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    HTTP_CODE=$(http "/" "-w %{http_code}")
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                      exit ${RC}
                    fi
                    # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    elif [[ ${HTTP_CODE} == "503" && "7" == "6" ]]; then
                      exit 0
                    else
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                      exit 1
                    fi

                  else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=yellow&timeout=20s" )'
                    if http "/_cluster/health?wait_for_status=yellow&timeout=20s" "--fail" ; then
                      touch ${START_FILE}
                      exit 0
                    else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=yellow&timeout=20s" )'
                      exit 1
                    fi
                  fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 9200
            - name: transport
              containerPort: 9300
          resources:
            limits:
              cpu: 1000m
              memory: 1024M
            requests:
              cpu: 100m
              memory: 256M
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: cluster.initial_master_nodes
              value: "elasticsearch-0,"
            - name: discovery.seed_hosts
              value: "elasticsearch-headless"
            - name: cluster.name
              value: "elasticsearch"
            - name: network.host
              value: "0.0.0.0"
            - name: ES_JAVA_OPTS
              value: "-Xmx128m -Xms128m"
            - name: node.data
              value: "true"
            - name: node.ingest
              value: "true"
            - name: node.master
              value: "true"
            - name: node.remote_cluster_client
              value: "true"
          volumeMounts:
            - name: "elasticsearch"
              mountPath: /usr/share/elasticsearch/data
