apiVersion: apps/v1
kind: Deployment
metadata:
  name: airlfow-triggerer
  labels:
    app: airflow
    component: triggerer
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple triggerer pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: triggerer
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: triggerer
    spec:
      restartPolicy: Always
      nodeSelector: {}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - airflow
              topologyKey: kubernetes.io/hostname
      tolerations: []
      serviceAccountName: airflow
      initContainers:
        - name: check-db
          image: quay.io/operate-first/om-ingestion:0.12.1
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: openmetadata-dependencies-config-envs
            - configMapRef:
                name: openmetadata-dependencies-config-envs
          env:
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec timeout 60s airflow db check"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
        - name: wait-for-db-migrations
          image: quay.io/operate-first/om-ingestion:0.12.1
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: openmetadata-dependencies-config-envs
            - configMapRef:
                name: openmetadata-dependencies-config-envs
          env:
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow db check-migrations -t 60"
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      containers:
        - name: airflow-triggerer
          image: quay.io/operate-first/om-ingestion:0.12.1
          imagePullPolicy: IfNotPresent
          resources: {}
          envFrom:
            - secretRef:
                name: openmetadata-dependencies-config-envs
            - configMapRef:
                name: openmetadata-dependencies-config-envs
          env:
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: airflow-mysql-secrets
                  key: airflow-mysql-password
            - name: CONNECTION_CHECK_MAX_COUNT
              value: "0"
          command:
            - "/usr/bin/dumb-init"
            - "--"
            - "/entrypoint"
          args:
            - "bash"
            - "-c"
            - "exec airflow triggerer"
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
            failureThreshold: 5
            exec:
              command:
                - "/usr/bin/dumb-init"
                - "--"
                - "/entrypoint"
                - "python"
                - "-Wignore"
                - "-c"
                - |
                  import os
                  import sys

                  # suppress logs triggered from importing airflow packages
                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  from airflow.jobs.triggerer_job import TriggererJob
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname

                  with create_session() as session:
                      # ensure the TriggererJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      triggerer_job = session \
                          .query(TriggererJob) \
                          .filter_by(hostname=hostname) \
                          .order_by(TriggererJob.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (triggerer_job is not None) and triggerer_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The TriggererJob (id={triggerer_job.id}) for hostname '{hostname}' is not alive")
          volumeMounts:
            - name: dags-data
              mountPath: /opt/airflow/dags
            - name: logs-data
              mountPath: /opt/airflow/logs
      volumes:
        - name: dags-data
          persistentVolumeClaim:
            claimName: airflow-dags
        - name: logs-data
          persistentVolumeClaim:
            claimName: airflow-logs
